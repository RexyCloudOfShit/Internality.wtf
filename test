local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sepper2023/Scorp.xyz/refs/heads/main/LinoriaFixed'))()
local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Awakenchan/Misc-Release/main/linoracolor'))()
local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sepper2023/Scorp.xyz/refs/heads/main/SaveManagerFixed'))()

local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Camera = game.Workspace.Camera
local Players = game.Players
local Player = Players.LocalPlayer

local Tracers = Instance.new("Folder",game.Workspace)
local ChangeFov = false
local Fov = 90

local ShootRemote = ReplicatedStorage.Events.Shoot
local RespawnRemote = ReplicatedStorage.Events.RespawnCharacter

local SilentCircle = Drawing.new("Circle")
SilentCircle.Radius = 150
SilentCircle.Visible = false
SilentCircle.NumSides = 128
SilentCircle.Thickness = 1.5
SilentCircle.Color = Color3.fromRGB(255,255,255)

local AimbotCircle = Drawing.new("Circle")
AimbotCircle.Radius = 150
AimbotCircle.Visible = false
AimbotCircle.NumSides = 128
AimbotCircle.Thickness = 1.5
AimbotCircle.Color = Color3.fromRGB(255,255,255)

game:GetService("RunService").RenderStepped:Connect(function()
    local Location = UserInputService:GetMouseLocation()

    SilentCircle.Position = Location
    AimbotCircle.Position = Location
end)

local NotificationEvent = Instance.new("BindableEvent")
NotificationEvent.Event:Connect(function(Text,Lenght)
    Library:Notify(Text,Lenght)
end)

local Sound = Instance.new("Sound",game.Workspace)
Sound.SoundId = "rbxassetid://8679627751"
Sound.Volume = 5

local Info = {
    Executor = identifyexecutor and identifyexecutor() or nil
}

local function IsSolara()
    if string.find(string.lower(Info.Executor),"solara") then
        return true
    end

    return false
end

local SilentAim = false
local Aimbot = false
local MagicBullet = false
local SilentAimPart = "Head"
local AimbotAimPart = "Head"
local RageBotAimPart = "Head"
local SpinCrosshair = false
local SpinCrosshairSpeed = 5
local InfiniteJump = false

local ThirdPerson = false

local HitTracer = false
local HitSound = false
local HitNotification = false

local RageBot = false

local ForceNight = false
local AmbientColor = false
local AmbientColorColor = Color3.fromRGB(255,255,255)

local CrosshairColor = false
local CrosshairColorColor = Color3.fromRGB(255,255,255)

local ViewmodelColor = false
local ViewmodelColorColor = Color3.fromRGB(255,255,255)

local ForceFieldViewmodel = false

local Flight = false
local Speed = false
local SpeedAmount = 5
local FlightAmount = 5

local function GetFovTarget(Radius)
    local Target = nil
    local LowestDistance = math.huge

    for i,v in pairs(Players.GetPlayers(Players)) do
        if v ~= Player and v.Character then 
            if v.Character.FindFirstChild(v.Character,"Humanoid") and v.Character.FindFirstChild(v.Character,"HumanoidRootPart") and v.Character.FindFirstChild(v.Character,SilentAimPart) then
                if v.Character.Humanoid.Health ~= 0 then
                    local ScreenPosition,OnScreen = Camera.WorldToViewportPoint(Camera,v.Character.HumanoidRootPart.Position)
                    local CheckDistance = (UserInputService.GetMouseLocation(UserInputService) - Vector2.new(ScreenPosition.X,ScreenPosition.Y)).Magnitude

                    if CheckDistance < Radius and OnScreen then
                        if CheckDistance < LowestDistance then
                            LowestDistance = CheckDistance
                            Target = v
                        end
                    end
                end
            end
        end
    end

    return Target
end

local function GetClosestVisiblePlayer()
    local closestPlayer
    local closestDistance = math.huge

    if Player.Character then
        for i,v in pairs(Players:GetPlayers()) do
            if (v.Character) and v.Character:FindFirstChild(RageBotAimPart) and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("Torso") and v ~= Player then
                if v.Character.Humanoid.Health == 0 or v.Character.Torso:FindFirstChild("SpawnShield") or (v.Team == Player.Team and v.Team ~= nil) then
                    continue
                end

                local Settings = RaycastParams.new()
                Settings.FilterType = Enum.RaycastFilterType.Include
                Settings.FilterDescendantsInstances = {workspace.Map}

                local Ray = game.Workspace:Raycast(Player.Character:GetPivot().Position,v.Character:GetPivot().Position - Player.Character:GetPivot().Position,Settings)
                if Ray == nil then
                    local Distance = (Player.Character:GetPivot().Position - v.Character:GetPivot().Position).Magnitude

                    if Distance < closestDistance then
                        closestPlayer = v
                        closestDistance = Distance
                    end
                end
            end
        end
    end

    return closestPlayer
end

local function CreateTracer(From,To)
    local part1 = Instance.new("Part",Tracers)
    part1.Anchored = true
    part1.CFrame = From
    part1.Transparency = 1
    part1.CanCollide = false

    local part2 = Instance.new("Part",Tracers)
    part2.Anchored = true
    part2.CFrame = To
    part2.Transparency = 1
    part2.CanCollide = false

    local attach1 = Instance.new("Attachment",part1)
    local attach2 = Instance.new("Attachment",part2)
    local Beam = Instance.new("Beam",Tracers)

    Beam.Attachment0 = attach1
    Beam.Attachment1 = attach2
    Beam.Texture = "http://www.roblox.com/asset/?id=7136858729"
    Beam.Color = ColorSequence.new(Color3.fromRGB(235, 11, 255))
    Beam.Width0 = 1
    Beam.Width1 = 1
    Beam.FaceCamera = true

    task.wait(3)
    part1:Destroy()
    part2:Destroy()
    Beam:Destroy()
end

local Window = Library:CreateWindow({
    Title = 'Scorp.XYZ | Unamed Shooter | V0.01',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Player = Window:AddTab('Player'),
    Combat = Window:AddTab('Combat'),
    Visuals = Window:AddTab("Visuals"),
    Settings = Window:AddTab("Settings")
}

if not isfolder("AuraConfigs") then
    makefolder("AuraConfigs")
end

SaveManager:SetLibrary(Library)
SaveManager:SetFolder('AuraConfigs/UnamedShooter')
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({'MenuKeybind'})
SaveManager:BuildConfigSection(Tabs.Settings)

ThemeManager:SetLibrary(Library)
ThemeManager:ApplyToTab(Tabs.Settings)
ThemeManager:ApplyTheme("Tokyo Night")

local Player_Main = Tabs.Player:AddLeftGroupbox('Main')
local Player_Character = Tabs.Player:AddRightGroupbox('Character')

local Combat_SilentAim = Tabs.Combat:AddLeftGroupbox('Silent Aim')
local Combat_Aimbot = Tabs.Combat:AddRightGroupbox('Aimbot')
local Combat_FovCircleSilent = Tabs.Combat:AddLeftGroupbox('Silent Aim Fov')
local Combat_FovCircleAimbot = Tabs.Combat:AddRightGroupbox('Aimbot Fov')
local Combat_RageBot = Tabs.Combat:AddLeftGroupbox('Rage-Bot')

local Visuals_World = Tabs.Visuals:AddLeftGroupbox('World')
local Visuals_Camera = Tabs.Visuals:AddRightGroupbox('Camera')
local Visuals_Viewmodel = Tabs.Visuals:AddLeftGroupbox('Viewmodel')
local Visuals_Crosshair = Tabs.Visuals:AddRightGroupbox('Crosshair')
local Visuals_BulletHit = Tabs.Visuals:AddLeftGroupbox('Bullet Hit')

Visuals_Camera:AddToggle('ThirdPerson', {
    Text = "Third Person",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        ThirdPerson = value

        if ThirdPerson then
            Player.CameraMode = "Classic"
        else 
            Player.CameraMode = "LockFirstPerson"
        end
    end
})

Visuals_Camera:AddToggle('ChangeFov', {
    Text = "Change Fov",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        ChangeFov = value

        while ChangeFov == true do
            Camera.FieldOfView = Fov

            task.wait()
        end

        Camera.FieldOfView = 90
    end
})

Visuals_Camera:AddSlider('FovAmount', {
    Text = 'FOV',
    Default = 90,
    Min = 90,
    Max = 120,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        Fov = value
    end
})

Combat_RageBot:AddToggle('RageBot', {
    Text = "Enable",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        RageBot = value

        while RageBot do
            local ViewModel = workspace:FindFirstChild("ViewModel")

            if ViewModel then
                local Weapon = ViewModel:FindFirstChildWhichIsA("Model")

                if (Weapon) and Weapon:FindFirstChild("Config") then
                    local ClosestPlayer = GetClosestVisiblePlayer()

                    if ClosestPlayer then
                        ShootRemote:FireServer(
                            {
                                {
                                    ClosestPlayer.Character[RageBotAimPart],
                                    ClosestPlayer.Character[RageBotAimPart].Position,
                                    Vector3.new(0,0,0)
                                }
                            },
                            CFrame.new(Player.Character:GetPivot().Position,ClosestPlayer.Character[RageBotAimPart].Position),
                            Weapon
                        )

                        wait(Weapon.Config:GetAttribute("ReloadTime"))
                    end
                end
            end

            task.wait()
        end
    end,
    Tooltip = "Will shoot visible people automatic."
})

Combat_RageBot:AddDropdown('RageBotPart', {
    Values = {"Head","Torso"},
    Default = 1,
    Multi = false,
    Text = 'Aim Bone',
    Callback = function(Value)
        RageBotAimPart = Value
    end
})

Visuals_BulletHit:AddToggle('EnableSound', {
    Text = "Enable Sound",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        HitSound = value
    end
})

Visuals_BulletHit:AddToggle('EnableTracer', {
    Text = "Enable Tracer",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        HitTracer = value
    end
})

Visuals_BulletHit:AddToggle('EnableNotification', {
    Text = "Enable Notification",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        HitNotification = value
    end
})

Visuals_BulletHit:AddDropdown('HitSoundsDropdown', {
    Values = {"Bell","Lazer","OSU","Bameware","MM2","Rust","NeverLose","Slime","Bat","Click","Ching Chong"},
    Default = 1,
    Multi = false,
    Text = 'Hit Sound',
    Callback = function(Value)
        if Value == "Bell" then Sound.SoundId = "rbxassetid://8679627751" Sound:Play() end
        if Value == "Lazer" then Sound.SoundId = "rbxassetid://130791043" Sound:Play() end
        if Value == "OSU" then Sound.SoundId = "rbxassetid://7147454322" Sound:Play() end
        if Value == "Bameware" then Sound.SoundId = "rbxassetid://3124331820" Sound:Play() end
        if Value == "MM2" then Sound.SoundId = "rbxassetid://296102734" Sound:Play() end
        if Value == "Rust" then Sound.SoundId = "rbxassetid://1255040462" Sound:Play() end
        if Value == "NeverLose" then Sound.SoundId = "rbxassetid://8726881116" Sound:Play() end
        if Value == "Slime" then Sound.SoundId = "rbxassetid://6916371803" Sound:Play() end
        if Value == "Bat" then Sound.SoundId = "rbxassetid://3333907347" Sound:Play() end
        if Value == "Click" then Sound.SoundId = "rbxassetid://8053704437" Sound:Play() end
        if Value == "Ching Chong" then Sound.SoundId = "rbxassetid://7346078859" Sound:Play() end
    end
})

Visuals_World:AddToggle('NightTime', {
    Text = "Force Night",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        ForceNight = value

        local OldTime = game.Lighting.TimeOfDay

        while ForceNight do
            game.Lighting.TimeOfDay = 24

            wait(0.1)
        end

        game.Lighting.TimeOfDay = OldTime
    end
})

Visuals_World:AddToggle('AmbientColor', {
    Text = "Ambient Color",
    Default = false,
    Tooltip = nil,
    Callback = function(value)
        AmbientColor = value

        local OldAmbient = game.Lighting.Ambient
        local OldOutdoorAmbient = game.Lighting.OutdoorAmbient

        while AmbientColor do
            game.Lighting.Ambient = AmbientColorColor
            game.Lighting.OutdoorAmbient = AmbientColorColor

            wait(0.1)
        end

        game.Lighting.Ambient = OldAmbient
        game.Lighting.OutdoorAmbient = OldOutdoorAmbient
    end
}):AddColorPicker('AmbientColorPicker', {
    Default = Color3.fromRGB(255,255,255),
    Title = 'Color',
    Callback = function(Value)
        AmbientColorColor = Value
    end
})

Visuals_Crosshair:AddToggle('SpinCrosshair', {
    Text = 'Spin Crosshair',
    Default = false,
    Callback = function(value)
        SpinCrosshair = value

        while SpinCrosshair do
            local Delta = RunService.Heartbeat:Wait()

            local MainGui = Player.PlayerGui:FindFirstChild("Main")
            
            if (MainGui) and MainGui:FindFirstChild("Crosshair") then
                if MainGui.Crosshair.Rotation > 360 then
                    MainGui.Crosshair.Rotation = 0
                end

                MainGui.Crosshair.Rotation += 1 * SpinCrosshairSpeed * Delta * 50
            end
        end

        local MainGui = Player.PlayerGui:FindFirstChild("Main")
        if (MainGui) and MainGui:FindFirstChild("Crosshair") then
            MainGui.Crosshair.Rotation = 0
        end
    end,
})

Visuals_Crosshair:AddSlider('CrosshairSpinSpeed', {
    Text = 'Spin Speed',
    Default = 5,
    Min = 1,
    Max = 10,
    Rounding = 1,
    Compact = false,
    Callback = function(value)
        SpinCrosshairSpeed = value
    end
})

Visuals_Viewmodel:AddToggle('ChangeViewModelColor', {
    Text = 'Change Color',
    Default = false,
    Callback = function(value)
        ViewmodelColor = value

        if ViewmodelColor == false then
            Library:Notify("Respawn to revert color.")
        end

        while ViewmodelColor do
            local Viewmodel = game.Workspace:FindFirstChild("ViewModel")

            if Viewmodel then
                for i,v in pairs(Viewmodel:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.Color = ViewmodelColorColor
                    end
                end
            end

            wait(0.1)
        end
    end,
}):AddColorPicker('ViewModelColorPicker', {
    Default = Color3.fromRGB(255,255,255),
    Callback = function(Value)
        ViewmodelColorColor = Value
    end
})

Visuals_Viewmodel:AddToggle('ForceFieldViewmodel', {
    Text = 'ForceField Material',
    Default = false,
    Callback = function(value)
        ForceFieldViewmodel = value

        while ForceFieldViewmodel do
            local Viewmodel = game.Workspace:FindFirstChild("ViewModel")

            if Viewmodel then
                for i,v in pairs(Viewmodel:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.Material = "ForceField"
                    end
                end
            end

            wait(0.1)
        end

        local Viewmodel = game.Workspace:FindFirstChild("ViewModel")

        if Viewmodel then
            for i,v in pairs(Viewmodel:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.Material = "SmoothPlastic"
                end
            end
        end
    end,
})

Player_Character:AddToggle('Noclip', {
    Text = 'No-Clip',
    Default = false,
    Callback = function(value)
        NoClip = value

        while NoClip do
            if (Player.Character) then
                for i,v in pairs(Player.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                    end
                end
            end

            wait(0.1)
        end

        if (Player.Character) then
            for i,v in pairs(Player.Character:GetDescendants()) do
                if v:IsA("BasePart") then
                    if v:FindFirstAncestor("WeaponVisual",true) or v.Parent == Player.Character then
                        continue
                    end

                    v.CanCollide = true
                end
            end
        end
    end
})

Player_Character:AddToggle('InfJump', {
    Text = 'Infinite Jump',
    Default = false,
    Callback = function(value)
        InfiniteJump = value
    end
})

Player_Character:AddButton({
    Text = 'Respawn',
    Func = function()
        RespawnRemote:FireServer()
    end,
    DoubleClick = false,
})

Player_Main:AddToggle('Speed', {
    Text = 'Enable Speed',
    Default = false,
    Callback = function(value)
        Speed = value

        local HB = game:GetService("RunService").Heartbeat
        while Speed == true do
            local delta = HB:Wait()

            if (Player.Character) and Player.Character:FindFirstChild("Humanoid") and Flight == false then
                if Player.Character.Humanoid.Sit == false then
                    Player.Character:PivotTo(Player.Character:GetPivot() + Player.Character.Humanoid.MoveDirection * SpeedAmount * delta * 10)
                end
            end
        end
    end
})

Player_Main:AddToggle('Flight', {
    Text = 'Enable Flight',
    Default = false,
    Callback = function(value)
        Flight = value

        while Flight == true do
            local delta = RunService.Heartbeat:Wait()

            if (Player.Character) and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("HumanoidRootPart") then
                if Player.Character.Humanoid.Sit == false then
                    Player.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)

                    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                        Player.Character:PivotTo(Player.Character:GetPivot() + Vector3.new(0,1,0) * FlightAmount * delta * 5)
                    end

                    if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                        Player.Character:PivotTo(Player.Character:GetPivot() - Vector3.new(0,1,0) * FlightAmount* delta * 5)
                    end

                    Player.Character:PivotTo(Player.Character:GetPivot() + Player.Character.Humanoid.MoveDirection * delta * FlightAmount * 5)
                end
            end
        end
    end
})

Player_Main:AddSlider('SpeedAmount', {
    Text = 'Speed Amount:',
    Default = 5,
    Min = 1,
    Max = 50,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        SpeedAmount = value
    end
})

Player_Main:AddSlider('FlightAmount', {
    Text = 'Flight Amount:',
    Default = 5,
    Min = 1,
    Max = 50,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        FlightAmount = value
    end
})

Combat_FovCircleAimbot:AddToggle('ShowFovAimbot', {
    Text = 'Show Fov',
    Default = false,
    Callback = function(value)
        AimbotCircle.Visible = value
    end,
}):AddColorPicker('FovColor', {
    Default = Color3.fromRGB(255,255,255),
    Callback = function(Value)
        AimbotCircle.Color = Value
    end
})

Combat_FovCircleAimbot:AddSlider('FovSizeAimbot', {
    Text = 'Size',
    Default = 150,
    Min = 10,
    Max = 500,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        AimbotCircle.Radius = value
    end
})

Combat_FovCircleAimbot:AddSlider('FovThicknessAimbot', {
    Text = 'Thickness',
    Default = 1.5,
    Min = 1.5,
    Max = 5,
    Rounding = 1,
    Compact = false,
    Callback = function(value)
        AimbotCircle.Thickness = value
    end
})

Combat_FovCircleSilent:AddToggle('ShowFovSilent', {
    Text = 'Show Fov',
    Default = false,
    Callback = function(value)
        SilentCircle.Visible = value
    end,
}):AddColorPicker('FovColor', {
    Default = Color3.fromRGB(255,255,255),
    Callback = function(Value)
        SilentCircle.Color = Value
    end
})

Combat_FovCircleSilent:AddSlider('FovSizeSilent', {
    Text = 'Size',
    Default = 150,
    Min = 10,
    Max = 500,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        SilentCircle.Radius = value
    end
})

Combat_FovCircleSilent:AddSlider('FovThicknessSilent', {
    Text = 'Thickness',
    Default = 1.5,
    Min = 1.5,
    Max = 5,
    Rounding = 1,
    Compact = false,
    Callback = function(value)
        SilentCircle.Thickness = value
    end
})

Combat_Aimbot:AddToggle('Aimbot', {
    Text = 'Enable',
    Default = false,
    Callback = function(value)
        Aimbot = value
    end,
})

Combat_Aimbot:AddDropdown('AimbotAimPart', {
    Values = {"Head","Torso"},
    Default = "Head",
    Multi = false, 
    Text = 'Aim Bone',   
    Tooltip = nil, 
    Callback = function(option)
        AimbotAimPart = option
    end
})

SilentAimToggle = Combat_SilentAim:AddToggle('SilentAim', {
    Text = 'Enable',
    Default = false,
    Callback = function(value)
        if value then
            if IsSolara() then
                Library:Notify("This feature is not supported with solara.")
                SilentAimToggle:SetValue(false)
    
                return
            end
        end

        SilentAim = value
    end,
})

Combat_SilentAim:AddDropdown('SilentAimPart', {
    Values = {"Head","Torso"},
    Default = "Head",
    Multi = false, 
    Text = 'Aim Bone',   
    Tooltip = nil, 
    Callback = function(option)
        SilentAimPart = option
    end
})

local MouseDown = false
UserInputService.InputBegan:Connect(function(Key,Typing)
    if InfiniteJump then
        if not Typing and Key.KeyCode == Enum.KeyCode.Space then
            if (Player.Character) and Player.Character:FindFirstChild("Humanoid") then
                Player.Character.Humanoid:ChangeState("Jumping")
            end
        end
    end

    if Key.UserInputType == Enum.UserInputType.MouseButton2 then
        MouseDown = true

        while MouseDown == true do
            if Aimbot then
                local Target = GetFovTarget(AimbotCircle.Radius)

                if Target then
                    Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position,Target.Character[AimbotAimPart].Position),1)
                end
            end

            task.wait()
        end
    end
end)

UserInputService.InputEnded:Connect(function(Key)
    if Key.UserInputType == Enum.UserInputType.MouseButton2 then
        MouseDown = false
    end
end)

--//Silent Aim, Bullet Hit:

if not IsSolara() then
    local RaycastModule = require(ReplicatedStorage.Events.Modules.RaycastModule)
    OldRaycast = RaycastModule.Raycast

    RaycastModule.Raycast = function(Origin,Direction,Settings)
        table.insert(Settings,Tracers)

        if SilentAim then
            local Target = GetFovTarget(SilentCircle.Radius)

            if Target then
                Direction = Target.Character[SilentAimPart].Position - Origin
            end
        end

        return OldRaycast(Origin,Direction,Settings)
    end
end

local function BulletsHit(args)
    if typeof(args[1]) == "table" then
        for i,v in pairs(args[1]) do
            if (typeof(v) == "table") and v[1] and v[2] then
                local Model = v[1].FindFirstAncestorWhichIsA(v[1],"Model")
                
                if (Model) and Players.GetPlayerFromCharacter(Players,Model) then

                    if HitTracer then
                        task.spawn( CreateTracer,args[3].GetPivot(args[3]),CFrame.new(v[2]) )
                    end
    
                    if HitSound then
                        task.spawn( Sound.Play,Sound )
                    end
    
                    if HitNotification then
                        task.spawn( NotificationEvent.Fire,NotificationEvent,"Hit "..Model.Name.." On "..v[1].Name.." With A "..args[3].Name)
                    end
                end
            end
        end
    end
end

if not IsSolara() then
    local RemoteEvent = Instance.new("RemoteEvent")

    OldFireServer = hookfunction(RemoteEvent.FireServer,function(self,...)
        if self == ShootRemote then
            task.spawn(BulletsHit,{...})
        end

        return OldFireServer(self,...)
    end)
end

if not IsSolara() then
    OldNamecall = hookmetamethod(game,"__namecall",function(self,...)
        if getnamecallmethod() == "FireServer" and self == ShootRemote then
            task.spawn(BulletsHit,{...})
        end
        
        return OldNamecall(self,...)
    end)
end
